#!/bin/sh
#
# mount.hpci - mount HPCI shared storage
#
# usage: mount.hpci [ --root | --home | --group | --user ]
#
# this command assumes to be executed by a normal user not root

PROG=`basename $0`

ABORT() {
	[ $# -gt 0 ] && echo >&2 $PROG: $*
	exit 1
}

NOTE() {
	echo >&2 "$1: this mount point is not ready at this site ($2)"
}

USAGE() {
	echo >&2 "usage: $PROG [ --root | --home | --group | --user ] [options]"
	exit 1
}

create_link()
{
    G=$1
    U=$2
    H=gfarm:///home/$G/$U
    if ! gftest -h $H/www; then
	gfln -s gfarm:///www/$G/$U $H/www && echo create \'www\' symlink
    fi
    if ! gftest -h $H/samba; then
	gfln -s gfarm:///samba/$G/$U $H/samba && echo create \'samba\' symlink
    fi
    if ! gftest -h $H/shared; then
	gfln -s gfarm:///home/$G/shared $H/shared && echo create \'shared\' symlink
    fi
}

# option
mount_dir=--user
mount_root=/gfarm
while [ $# -gt 0 ]
do
	case $1 in
	--root|--home|--group|--user)
		mount_dir=$1
		;;
	-h)
		USAGE
		;;
	*)
		break
		;;
	esac
	shift
done
if [ $# -eq 1 ]; then
	options="$1"
elif [ $# -gt 1 ]; then
	USAGE
fi

# check privilege to use FUSE
[ -w /dev/fuse ] || ABORT "Cannot access /dev/fuse."

# check access to Gfarm
gfstatus > /dev/null 2>&1 || ABORT "Unable to access Gfarm"

# check proxy cert
auth=gsi
grid-proxy-info > /dev/null 2>&1 || auth=sharedsecret

# display timeleft of proxy cert
case $auth in
    gsi)
    (grid-proxy-info || ABORT "Invalid proxy certificate") | grep timeleft ;;
    *)
    gfkey -e ;;
esac

GFUSER=`gfwhoami`
[ X"$GFUSER" = X ] && ABORT 'Who?'
: ${USER:=`whoami`}
USERLIST="$GFUSER"
[ X"$GFUSER" != X"$USER" ] && USERLIST="$USERLIST $USER"

: ${GFARM_CONFIG_FILE:=`gfstatus 2>/dev/null | grep "user config file" | awk '{ print $5 }'`}
: ${GFARM_CONFIG_FILE:="$HOME/.gfarm2rc"}

groups=`gfgroup -l | grep $GFUSER | awk -F: '{print $1}'`
if [ -z "$groups" ]; then
    ABORT "The Gfarm user '$GFUSER' doesn't belong to any Gfarm group."
fi

MOUNT() {
    case $mount_dir in
	--root) GFARMFS_ROOT=/ ;;
	--home) GFARMFS_ROOT=/home ;;
	--group) GFARMFS_ROOT=/home/$g ;;
	--user) GFARMFS_ROOT=/home/$g/$GFUSER ;;
    esac
    env GFARMFS_ROOT=$GFARMFS_ROOT mount.gfarm2fs "$GFARM_CONFIG_FILE" $mount_point $options
}

return_code=1
for g in $groups
do
    [ $g = "gfarmadm" -o $g = "gfarmroot" -o $g = "gfarmtmp" ] && continue

    cannot_mount=true
    for u in $USERLIST
    do
	mount_point=$mount_root/$g/$u

	if awk '{ print $2 }' /etc/mtab | grep "^$mount_point$" >/dev/null
	then
	    echo $mount_point: already mounted
	    cannot_mount=false
	    break
	fi
	if [ -d $mount_point ]; then
	    if MOUNT; then
		cannot_mount=false
		break
	    fi
	fi
    done
    # last resort
    if $cannot_mount; then
	mount_point=/tmp/$g/$GFUSER
	if awk '{ print $2 }' /etc/mtab | grep "^$mount_point$" >/dev/null
	then
	    echo $mount_point: already mounted
	    cannot_mount=false
	elif mkdir -p $mount_point; then
	    chmod 1777 /tmp/$g > /dev/null 2>&1 || :
	    if MOUNT; then
		cannot_mount=false
	    else
		rmdir $mount_point
		rmdir /tmp/$g > /dev/null 2>&1 || :
	    fi
	fi
    fi
    if $cannot_mount; then
	NOTE $mount_point "failed to mount"
    else
	return_code=0
	# create symlinks
	create_link $g $GFUSER
    fi
done
exit $return_code
